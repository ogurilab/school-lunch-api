// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: allergen.sql

package db

import (
	"context"
	"strings"
)

const createAllergen = `-- name: CreateAllergen :exec
INSERT INTO allergens (name)
VALUES (?)
`

func (q *Queries) CreateAllergen(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createAllergen, name)
	return err
}

const getAllergenByName = `-- name: GetAllergenByName :one
SELECT id,
  name
FROM allergens
WHERE name = ?
`

func (q *Queries) GetAllergenByName(ctx context.Context, name string) (Allergen, error) {
	row := q.db.QueryRowContext(ctx, getAllergenByName, name)
	var i Allergen
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listAllergenByDishID = `-- name: ListAllergenByDishID :many
SELECT allergens.id,
  allergens.name
FROM allergens
  JOIN dishes_allergens ON allergens.id = dishes_allergens.allergen_id
WHERE dishes_allergens.dish_id = ?
ORDER BY allergens.name
`

func (q *Queries) ListAllergenByDishID(ctx context.Context, dishID string) ([]Allergen, error) {
	rows, err := q.db.QueryContext(ctx, listAllergenByDishID, dishID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Allergen{}
	for rows.Next() {
		var i Allergen
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllergenInDish = `-- name: ListAllergenInDish :many
SELECT allergens.id,
  allergens.name
FROM allergens
  JOIN dishes_allergens ON allergens.id = dishes_allergens.allergen_id
WHERE dishes_allergens.dish_id IN (/*SLICE:dish_ids*/?)
ORDER BY allergens.name
`

func (q *Queries) ListAllergenInDish(ctx context.Context, dishIds []string) ([]Allergen, error) {
	query := listAllergenInDish
	var queryParams []interface{}
	if len(dishIds) > 0 {
		for _, v := range dishIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:dish_ids*/?", strings.Repeat(",?", len(dishIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:dish_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Allergen{}
	for rows.Next() {
		var i Allergen
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
