// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: menu.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createMenu = `-- name: CreateMenu :exec
INSERT INTO menus (
    id,
    offered_at,
    photo_url,
    elementary_school_calories,
    junior_high_school_calories,
    city_code
  )
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
  )
`

type CreateMenuParams struct {
	ID                       string         `json:"id"`
	OfferedAt                time.Time      `json:"offered_at"`
	PhotoUrl                 sql.NullString `json:"photo_url"`
	ElementarySchoolCalories int32          `json:"elementary_school_calories"`
	JuniorHighSchoolCalories int32          `json:"junior_high_school_calories"`
	CityCode                 int32          `json:"city_code"`
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) error {
	_, err := q.db.ExecContext(ctx, createMenu,
		arg.ID,
		arg.OfferedAt,
		arg.PhotoUrl,
		arg.ElementarySchoolCalories,
		arg.JuniorHighSchoolCalories,
		arg.CityCode,
	)
	return err
}

const getMenu = `-- name: GetMenu :one
SELECT id, offered_at, photo_url, created_at, elementary_school_calories, junior_high_school_calories, city_code
FROM menus
WHERE id = ?
  AND city_code = ?
`

type GetMenuParams struct {
	ID       string `json:"id"`
	CityCode int32  `json:"city_code"`
}

func (q *Queries) GetMenu(ctx context.Context, arg GetMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, getMenu, arg.ID, arg.CityCode)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.OfferedAt,
		&i.PhotoUrl,
		&i.CreatedAt,
		&i.ElementarySchoolCalories,
		&i.JuniorHighSchoolCalories,
		&i.CityCode,
	)
	return i, err
}

const getMenuWithDishes = `-- name: GetMenuWithDishes :one
SELECT m.id, m.offered_at, m.photo_url, m.created_at, m.elementary_school_calories, m.junior_high_school_calories, m.city_code,
  JSON_ARRAYAGG(
    JSON_OBJECT(
      'id',
      d.id,
      'name',
      d.name,
      'menu_id',
      d.menu_id
    )
  ) AS dishes
FROM menus AS m
  LEFT JOIN dishes AS d ON m.id = d.menu_id
WHERE m.id = ?
  AND m.city_code = ?
GROUP BY m.id
`

type GetMenuWithDishesParams struct {
	ID       string `json:"id"`
	CityCode int32  `json:"city_code"`
}

type GetMenuWithDishesRow struct {
	ID                       string          `json:"id"`
	OfferedAt                time.Time       `json:"offered_at"`
	PhotoUrl                 sql.NullString  `json:"photo_url"`
	CreatedAt                time.Time       `json:"created_at"`
	ElementarySchoolCalories int32           `json:"elementary_school_calories"`
	JuniorHighSchoolCalories int32           `json:"junior_high_school_calories"`
	CityCode                 int32           `json:"city_code"`
	Dishes                   json.RawMessage `json:"dishes"`
}

func (q *Queries) GetMenuWithDishes(ctx context.Context, arg GetMenuWithDishesParams) (GetMenuWithDishesRow, error) {
	row := q.db.QueryRowContext(ctx, getMenuWithDishes, arg.ID, arg.CityCode)
	var i GetMenuWithDishesRow
	err := row.Scan(
		&i.ID,
		&i.OfferedAt,
		&i.PhotoUrl,
		&i.CreatedAt,
		&i.ElementarySchoolCalories,
		&i.JuniorHighSchoolCalories,
		&i.CityCode,
		&i.Dishes,
	)
	return i, err
}

const listMenuNyCity = `-- name: ListMenuNyCity :many
SELECT id, offered_at, photo_url, created_at, elementary_school_calories, junior_high_school_calories, city_code
FROM menus AS m
WHERE city_code = ?
  AND offered_at >= ?
ORDER BY offered_at
LIMIT ? OFFSET ?
`

type ListMenuNyCityParams struct {
	CityCode  int32     `json:"city_code"`
	OfferedAt time.Time `json:"offered_at"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
}

func (q *Queries) ListMenuNyCity(ctx context.Context, arg ListMenuNyCityParams) ([]Menu, error) {
	rows, err := q.db.QueryContext(ctx, listMenuNyCity,
		arg.CityCode,
		arg.OfferedAt,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Menu{}
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.ID,
			&i.OfferedAt,
			&i.PhotoUrl,
			&i.CreatedAt,
			&i.ElementarySchoolCalories,
			&i.JuniorHighSchoolCalories,
			&i.CityCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMenuWithDishes = `-- name: ListMenuWithDishes :many
SELECT m.id, m.offered_at, m.photo_url, m.created_at, m.elementary_school_calories, m.junior_high_school_calories, m.city_code,
  JSON_ARRAYAGG(
    JSON_OBJECT(
      'id',
      d.id,
      'name',
      d.name,
      'menu_id',
      d.menu_id
    )
  ) AS dishes
FROM menus AS m
  LEFT JOIN dishes AS d ON m.id = d.menu_id
WHERE m.offered_at >= ?
GROUP BY m.id
ORDER BY offered_at
LIMIT ? OFFSET ?
`

type ListMenuWithDishesParams struct {
	OfferedAt time.Time `json:"offered_at"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
}

type ListMenuWithDishesRow struct {
	ID                       string          `json:"id"`
	OfferedAt                time.Time       `json:"offered_at"`
	PhotoUrl                 sql.NullString  `json:"photo_url"`
	CreatedAt                time.Time       `json:"created_at"`
	ElementarySchoolCalories int32           `json:"elementary_school_calories"`
	JuniorHighSchoolCalories int32           `json:"junior_high_school_calories"`
	CityCode                 int32           `json:"city_code"`
	Dishes                   json.RawMessage `json:"dishes"`
}

func (q *Queries) ListMenuWithDishes(ctx context.Context, arg ListMenuWithDishesParams) ([]ListMenuWithDishesRow, error) {
	rows, err := q.db.QueryContext(ctx, listMenuWithDishes, arg.OfferedAt, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMenuWithDishesRow{}
	for rows.Next() {
		var i ListMenuWithDishesRow
		if err := rows.Scan(
			&i.ID,
			&i.OfferedAt,
			&i.PhotoUrl,
			&i.CreatedAt,
			&i.ElementarySchoolCalories,
			&i.JuniorHighSchoolCalories,
			&i.CityCode,
			&i.Dishes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMenuWithDishesByCity = `-- name: ListMenuWithDishesByCity :many
SELECT m.id, m.offered_at, m.photo_url, m.created_at, m.elementary_school_calories, m.junior_high_school_calories, m.city_code,
  JSON_ARRAYAGG(
    JSON_OBJECT(
      'id',
      d.id,
      'name',
      d.name,
      'menu_id',
      d.menu_id
    )
  ) AS dishes
FROM menus AS m
  LEFT JOIN dishes AS d ON m.id = d.menu_id
WHERE m.city_code = ?
  AND m.offered_at >= ?
GROUP BY m.id
ORDER BY offered_at
LIMIT ? OFFSET ?
`

type ListMenuWithDishesByCityParams struct {
	CityCode  int32     `json:"city_code"`
	OfferedAt time.Time `json:"offered_at"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
}

type ListMenuWithDishesByCityRow struct {
	ID                       string          `json:"id"`
	OfferedAt                time.Time       `json:"offered_at"`
	PhotoUrl                 sql.NullString  `json:"photo_url"`
	CreatedAt                time.Time       `json:"created_at"`
	ElementarySchoolCalories int32           `json:"elementary_school_calories"`
	JuniorHighSchoolCalories int32           `json:"junior_high_school_calories"`
	CityCode                 int32           `json:"city_code"`
	Dishes                   json.RawMessage `json:"dishes"`
}

func (q *Queries) ListMenuWithDishesByCity(ctx context.Context, arg ListMenuWithDishesByCityParams) ([]ListMenuWithDishesByCityRow, error) {
	rows, err := q.db.QueryContext(ctx, listMenuWithDishesByCity,
		arg.CityCode,
		arg.OfferedAt,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMenuWithDishesByCityRow{}
	for rows.Next() {
		var i ListMenuWithDishesByCityRow
		if err := rows.Scan(
			&i.ID,
			&i.OfferedAt,
			&i.PhotoUrl,
			&i.CreatedAt,
			&i.ElementarySchoolCalories,
			&i.JuniorHighSchoolCalories,
			&i.CityCode,
			&i.Dishes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
