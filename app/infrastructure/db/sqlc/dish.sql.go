// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: dish.sql

package db

import (
	"context"
)

const createDish = `-- name: CreateDish :exec
INSERT INTO dishes (id, name)
VALUES (?, ?)
`

type CreateDishParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateDish(ctx context.Context, arg CreateDishParams) error {
	_, err := q.db.ExecContext(ctx, createDish, arg.ID, arg.Name)
	return err
}

const getDish = `-- name: GetDish :one
SELECT dishes.id,
  dishes.name
FROM dishes
WHERE id = ?
LIMIT 1
`

type GetDishRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetDish(ctx context.Context, id string) (GetDishRow, error) {
	row := q.db.QueryRowContext(ctx, getDish, id)
	var i GetDishRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listDish = `-- name: ListDish :many
SELECT dishes.id,
  dishes.name
FROM dishes
ORDER BY id
LIMIT ? OFFSET ?
`

type ListDishParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListDishRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListDish(ctx context.Context, arg ListDishParams) ([]ListDishRow, error) {
	rows, err := q.db.QueryContext(ctx, listDish, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDishRow{}
	for rows.Next() {
		var i ListDishRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDishByMenuID = `-- name: ListDishByMenuID :many
SELECT dishes.id,
  dishes.name
FROM dishes
WHERE id IN (
    SELECT dish_id
    FROM menu_dishes
    WHERE menu_id = ?
  )
ORDER BY id
`

type ListDishByMenuIDRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListDishByMenuID(ctx context.Context, menuID string) ([]ListDishByMenuIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listDishByMenuID, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDishByMenuIDRow{}
	for rows.Next() {
		var i ListDishByMenuIDRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDishByName = `-- name: ListDishByName :many
SELECT dishes.id,
  dishes.name
FROM dishes
WHERE name LIKE ?
ORDER BY id
LIMIT ? OFFSET ?
`

type ListDishByNameParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListDishByNameRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListDishByName(ctx context.Context, arg ListDishByNameParams) ([]ListDishByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, listDishByName, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDishByNameRow{}
	for rows.Next() {
		var i ListDishByNameRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
