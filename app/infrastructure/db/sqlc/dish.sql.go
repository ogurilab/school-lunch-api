// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: dish.sql

package db

import (
	"context"
)

const createDish = `-- name: CreateDish :exec
INSERT INTO dishes (id, menu_id, name)
VALUES (
    ?,
    ?,
    ?
  )
`

type CreateDishParams struct {
	ID     string `json:"id"`
	MenuID string `json:"menu_id"`
	Name   string `json:"name"`
}

func (q *Queries) CreateDish(ctx context.Context, arg CreateDishParams) error {
	_, err := q.db.ExecContext(ctx, createDish, arg.ID, arg.MenuID, arg.Name)
	return err
}

const getDish = `-- name: GetDish :one
SELECT id, menu_id, name, created_at
FROM dishes
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetDish(ctx context.Context, id string) (Dish, error) {
	row := q.db.QueryRowContext(ctx, getDish, id)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const listDish = `-- name: ListDish :many
SELECT id, menu_id, name, created_at
FROM dishes
ORDER BY id
LIMIT ? OFFSET ?
`

type ListDishParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDish(ctx context.Context, arg ListDishParams) ([]Dish, error) {
	rows, err := q.db.QueryContext(ctx, listDish, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dish{}
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDishByMenuID = `-- name: ListDishByMenuID :many
SELECT id, menu_id, name, created_at
FROM dishes
WHERE menu_id = ?
ORDER BY id
`

func (q *Queries) ListDishByMenuID(ctx context.Context, menuID string) ([]Dish, error) {
	rows, err := q.db.QueryContext(ctx, listDishByMenuID, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dish{}
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDishByName = `-- name: ListDishByName :many
SELECT id, menu_id, name, created_at
FROM dishes
WHERE name LIKE ?
ORDER BY id
LIMIT ? OFFSET ?
`

type ListDishByNameParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListDishByName(ctx context.Context, arg ListDishByNameParams) ([]Dish, error) {
	rows, err := q.db.QueryContext(ctx, listDishByName, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dish{}
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
