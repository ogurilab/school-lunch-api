// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: city.sql

package db

import (
	"context"
)

const createCity = `-- name: CreateCity :exec
INSERT INTO cities (
    city_code,
    city_name,
    prefecture_code,
    prefecture_name
  )
VALUES (
    ?,
    ?,
    ?,
    ?
  )
`

type CreateCityParams struct {
	CityCode       int32  `json:"city_code"`
	CityName       string `json:"city_name"`
	PrefectureCode int32  `json:"prefecture_code"`
	PrefectureName string `json:"prefecture_name"`
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) error {
	_, err := q.db.ExecContext(ctx, createCity,
		arg.CityCode,
		arg.CityName,
		arg.PrefectureCode,
		arg.PrefectureName,
	)
	return err
}

const getCity = `-- name: GetCity :one
SELECT city_code, city_name, prefecture_code, prefecture_name, school_lunch_info_available
FROM cities
WHERE city_code = ?
LIMIT 1
`

func (q *Queries) GetCity(ctx context.Context, cityCode int32) (City, error) {
	row := q.db.QueryRowContext(ctx, getCity, cityCode)
	var i City
	err := row.Scan(
		&i.CityCode,
		&i.CityName,
		&i.PrefectureCode,
		&i.PrefectureName,
		&i.SchoolLunchInfoAvailable,
	)
	return i, err
}

const listCities = `-- name: ListCities :many
SELECT city_code, city_name, prefecture_code, prefecture_name, school_lunch_info_available
FROM cities
ORDER BY city_code
LIMIT ? OFFSET ?
`

type ListCitiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCities(ctx context.Context, arg ListCitiesParams) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []City{}
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.CityCode,
			&i.CityName,
			&i.PrefectureCode,
			&i.PrefectureName,
			&i.SchoolLunchInfoAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCitiesByName = `-- name: ListCitiesByName :many
SELECT city_code, city_name, prefecture_code, prefecture_name, school_lunch_info_available
FROM cities
WHERE city_name LIKE ?
ORDER BY city_code
LIMIT ? OFFSET ?
`

type ListCitiesByNameParams struct {
	CityName string `json:"city_name"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListCitiesByName(ctx context.Context, arg ListCitiesByNameParams) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCitiesByName, arg.CityName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []City{}
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.CityCode,
			&i.CityName,
			&i.PrefectureCode,
			&i.PrefectureName,
			&i.SchoolLunchInfoAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCitiesByPrefecture = `-- name: ListCitiesByPrefecture :many
SELECT city_code, city_name, prefecture_code, prefecture_name, school_lunch_info_available
FROM cities
WHERE prefecture_code = ?
ORDER BY city_code
LIMIT ? OFFSET ?
`

type ListCitiesByPrefectureParams struct {
	PrefectureCode int32 `json:"prefecture_code"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListCitiesByPrefecture(ctx context.Context, arg ListCitiesByPrefectureParams) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCitiesByPrefecture, arg.PrefectureCode, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []City{}
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.CityCode,
			&i.CityName,
			&i.PrefectureCode,
			&i.PrefectureName,
			&i.SchoolLunchInfoAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
