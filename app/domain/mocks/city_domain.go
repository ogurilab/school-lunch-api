// Code generated by MockGen. DO NOT EDIT.
// Source: domain/city_domain.go
//
// Generated by this command:
//
//	mockgen -source domain/city_domain.go -destination domain/mocks/city_domain.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	domain "github.com/ogurilab/school-lunch-api/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCityRepository is a mock of CityRepository interface.
type MockCityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCityRepositoryMockRecorder
}

// MockCityRepositoryMockRecorder is the mock recorder for MockCityRepository.
type MockCityRepositoryMockRecorder struct {
	mock *MockCityRepository
}

// NewMockCityRepository creates a new mock instance.
func NewMockCityRepository(ctrl *gomock.Controller) *MockCityRepository {
	mock := &MockCityRepository{ctrl: ctrl}
	mock.recorder = &MockCityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityRepository) EXPECT() *MockCityRepositoryMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockCityRepository) Fetch(ctx context.Context, limit, offset int32) ([]*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockCityRepositoryMockRecorder) Fetch(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockCityRepository)(nil).Fetch), ctx, limit, offset)
}

// FetchByName mocks base method.
func (m *MockCityRepository) FetchByName(ctx context.Context, limit, offset int32, search string) ([]*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByName", ctx, limit, offset, search)
	ret0, _ := ret[0].([]*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByName indicates an expected call of FetchByName.
func (mr *MockCityRepositoryMockRecorder) FetchByName(ctx, limit, offset, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByName", reflect.TypeOf((*MockCityRepository)(nil).FetchByName), ctx, limit, offset, search)
}

// FetchByPrefectureCode mocks base method.
func (m *MockCityRepository) FetchByPrefectureCode(ctx context.Context, limit, offset, prefectureCode int32) ([]*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByPrefectureCode", ctx, limit, offset, prefectureCode)
	ret0, _ := ret[0].([]*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByPrefectureCode indicates an expected call of FetchByPrefectureCode.
func (mr *MockCityRepositoryMockRecorder) FetchByPrefectureCode(ctx, limit, offset, prefectureCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByPrefectureCode", reflect.TypeOf((*MockCityRepository)(nil).FetchByPrefectureCode), ctx, limit, offset, prefectureCode)
}

// GetByCityCode mocks base method.
func (m *MockCityRepository) GetByCityCode(ctx context.Context, code int32) (*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCityCode", ctx, code)
	ret0, _ := ret[0].(*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCityCode indicates an expected call of GetByCityCode.
func (mr *MockCityRepositoryMockRecorder) GetByCityCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCityCode", reflect.TypeOf((*MockCityRepository)(nil).GetByCityCode), ctx, code)
}

// MockCityUsecase is a mock of CityUsecase interface.
type MockCityUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCityUsecaseMockRecorder
}

// MockCityUsecaseMockRecorder is the mock recorder for MockCityUsecase.
type MockCityUsecaseMockRecorder struct {
	mock *MockCityUsecase
}

// NewMockCityUsecase creates a new mock instance.
func NewMockCityUsecase(ctrl *gomock.Controller) *MockCityUsecase {
	mock := &MockCityUsecase{ctrl: ctrl}
	mock.recorder = &MockCityUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityUsecase) EXPECT() *MockCityUsecaseMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockCityUsecase) Fetch(ctx context.Context, limit, offset int32, search string) ([]*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, limit, offset, search)
	ret0, _ := ret[0].([]*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockCityUsecaseMockRecorder) Fetch(ctx, limit, offset, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockCityUsecase)(nil).Fetch), ctx, limit, offset, search)
}

// FetchByPrefectureCode mocks base method.
func (m *MockCityUsecase) FetchByPrefectureCode(ctx context.Context, limit, offset, prefectureCode int32) ([]*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByPrefectureCode", ctx, limit, offset, prefectureCode)
	ret0, _ := ret[0].([]*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByPrefectureCode indicates an expected call of FetchByPrefectureCode.
func (mr *MockCityUsecaseMockRecorder) FetchByPrefectureCode(ctx, limit, offset, prefectureCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByPrefectureCode", reflect.TypeOf((*MockCityUsecase)(nil).FetchByPrefectureCode), ctx, limit, offset, prefectureCode)
}

// GetByCityCode mocks base method.
func (m *MockCityUsecase) GetByCityCode(ctx context.Context, code int32) (*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCityCode", ctx, code)
	ret0, _ := ret[0].(*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCityCode indicates an expected call of GetByCityCode.
func (mr *MockCityUsecaseMockRecorder) GetByCityCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCityCode", reflect.TypeOf((*MockCityUsecase)(nil).GetByCityCode), ctx, code)
}

// MockCityController is a mock of CityController interface.
type MockCityController struct {
	ctrl     *gomock.Controller
	recorder *MockCityControllerMockRecorder
}

// MockCityControllerMockRecorder is the mock recorder for MockCityController.
type MockCityControllerMockRecorder struct {
	mock *MockCityController
}

// NewMockCityController creates a new mock instance.
func NewMockCityController(ctrl *gomock.Controller) *MockCityController {
	mock := &MockCityController{ctrl: ctrl}
	mock.recorder = &MockCityControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityController) EXPECT() *MockCityControllerMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockCityController) Fetch(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockCityControllerMockRecorder) Fetch(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockCityController)(nil).Fetch), c)
}

// FetchByPrefectureCode mocks base method.
func (m *MockCityController) FetchByPrefectureCode(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByPrefectureCode", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchByPrefectureCode indicates an expected call of FetchByPrefectureCode.
func (mr *MockCityControllerMockRecorder) FetchByPrefectureCode(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByPrefectureCode", reflect.TypeOf((*MockCityController)(nil).FetchByPrefectureCode), c)
}

// GetByCityCode mocks base method.
func (m *MockCityController) GetByCityCode(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCityCode", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByCityCode indicates an expected call of GetByCityCode.
func (mr *MockCityControllerMockRecorder) GetByCityCode(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCityCode", reflect.TypeOf((*MockCityController)(nil).GetByCityCode), c)
}
