// Code generated by MockGen. DO NOT EDIT.
// Source: domain/menu_domain.go
//
// Generated by this command:
//
//	mockgen -source domain/menu_domain.go -destination domain/mocks/menu_domain.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/ogurilab/school-lunch-api/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockMenuRepository is a mock of MenuRepository interface.
type MockMenuRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMenuRepositoryMockRecorder
}

// MockMenuRepositoryMockRecorder is the mock recorder for MockMenuRepository.
type MockMenuRepositoryMockRecorder struct {
	mock *MockMenuRepository
}

// NewMockMenuRepository creates a new mock instance.
func NewMockMenuRepository(ctrl *gomock.Controller) *MockMenuRepository {
	mock := &MockMenuRepository{ctrl: ctrl}
	mock.recorder = &MockMenuRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuRepository) EXPECT() *MockMenuRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMenuRepository) Create(ctx context.Context, menu *domain.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, menu)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMenuRepositoryMockRecorder) Create(ctx, menu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMenuRepository)(nil).Create), ctx, menu)
}

// Fetch mocks base method.
func (m *MockMenuRepository) Fetch(ctx context.Context, limit, offset int32) ([]*domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockMenuRepositoryMockRecorder) Fetch(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockMenuRepository)(nil).Fetch), ctx, limit, offset)
}

// FetchByOfferedAt mocks base method.
func (m *MockMenuRepository) FetchByOfferedAt(ctx context.Context, start, end time.Time) ([]*domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByOfferedAt", ctx, start, end)
	ret0, _ := ret[0].([]*domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByOfferedAt indicates an expected call of FetchByOfferedAt.
func (mr *MockMenuRepositoryMockRecorder) FetchByOfferedAt(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByOfferedAt", reflect.TypeOf((*MockMenuRepository)(nil).FetchByOfferedAt), ctx, start, end)
}

// FetchMenuWithDishes mocks base method.
func (m *MockMenuRepository) FetchMenuWithDishes(ctx context.Context, limit, offset int32) ([]*domain.MenuWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMenuWithDishes", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.MenuWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMenuWithDishes indicates an expected call of FetchMenuWithDishes.
func (mr *MockMenuRepositoryMockRecorder) FetchMenuWithDishes(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMenuWithDishes", reflect.TypeOf((*MockMenuRepository)(nil).FetchMenuWithDishes), ctx, limit, offset)
}

// FetchMenuWithDishesByOfferedAt mocks base method.
func (m *MockMenuRepository) FetchMenuWithDishesByOfferedAt(ctx context.Context, start, end time.Time) ([]*domain.MenuWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMenuWithDishesByOfferedAt", ctx, start, end)
	ret0, _ := ret[0].([]*domain.MenuWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMenuWithDishesByOfferedAt indicates an expected call of FetchMenuWithDishesByOfferedAt.
func (mr *MockMenuRepositoryMockRecorder) FetchMenuWithDishesByOfferedAt(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMenuWithDishesByOfferedAt", reflect.TypeOf((*MockMenuRepository)(nil).FetchMenuWithDishesByOfferedAt), ctx, start, end)
}

// GetByID mocks base method.
func (m *MockMenuRepository) GetByID(ctx context.Context, id string) (*domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMenuRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMenuRepository)(nil).GetByID), ctx, id)
}

// GetByOfferedAt mocks base method.
func (m *MockMenuRepository) GetByOfferedAt(ctx context.Context, offeredAt time.Time) (*domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOfferedAt", ctx, offeredAt)
	ret0, _ := ret[0].(*domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOfferedAt indicates an expected call of GetByOfferedAt.
func (mr *MockMenuRepositoryMockRecorder) GetByOfferedAt(ctx, offeredAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOfferedAt", reflect.TypeOf((*MockMenuRepository)(nil).GetByOfferedAt), ctx, offeredAt)
}

// GetMenuWithDishesByID mocks base method.
func (m *MockMenuRepository) GetMenuWithDishesByID(ctx context.Context, id string) (*domain.MenuWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuWithDishesByID", ctx, id)
	ret0, _ := ret[0].(*domain.MenuWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuWithDishesByID indicates an expected call of GetMenuWithDishesByID.
func (mr *MockMenuRepositoryMockRecorder) GetMenuWithDishesByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuWithDishesByID", reflect.TypeOf((*MockMenuRepository)(nil).GetMenuWithDishesByID), ctx, id)
}

// GetMenuWithDishesByOfferedAt mocks base method.
func (m *MockMenuRepository) GetMenuWithDishesByOfferedAt(ctx context.Context, offeredAt time.Time) (*domain.MenuWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuWithDishesByOfferedAt", ctx, offeredAt)
	ret0, _ := ret[0].(*domain.MenuWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuWithDishesByOfferedAt indicates an expected call of GetMenuWithDishesByOfferedAt.
func (mr *MockMenuRepositoryMockRecorder) GetMenuWithDishesByOfferedAt(ctx, offeredAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuWithDishesByOfferedAt", reflect.TypeOf((*MockMenuRepository)(nil).GetMenuWithDishesByOfferedAt), ctx, offeredAt)
}

// MockMenuUsecase is a mock of MenuUsecase interface.
type MockMenuUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMenuUsecaseMockRecorder
}

// MockMenuUsecaseMockRecorder is the mock recorder for MockMenuUsecase.
type MockMenuUsecaseMockRecorder struct {
	mock *MockMenuUsecase
}

// NewMockMenuUsecase creates a new mock instance.
func NewMockMenuUsecase(ctrl *gomock.Controller) *MockMenuUsecase {
	mock := &MockMenuUsecase{ctrl: ctrl}
	mock.recorder = &MockMenuUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuUsecase) EXPECT() *MockMenuUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMenuUsecase) Create(ctx context.Context, menu *domain.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, menu)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMenuUsecaseMockRecorder) Create(ctx, menu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMenuUsecase)(nil).Create), ctx, menu)
}

// Fetch mocks base method.
func (m *MockMenuUsecase) Fetch(ctx context.Context, limit, offset int32) ([]*domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockMenuUsecaseMockRecorder) Fetch(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockMenuUsecase)(nil).Fetch), ctx, limit, offset)
}

// FetchByOfferedAt mocks base method.
func (m *MockMenuUsecase) FetchByOfferedAt(ctx context.Context, start, end time.Time) ([]*domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByOfferedAt", ctx, start, end)
	ret0, _ := ret[0].([]*domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByOfferedAt indicates an expected call of FetchByOfferedAt.
func (mr *MockMenuUsecaseMockRecorder) FetchByOfferedAt(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByOfferedAt", reflect.TypeOf((*MockMenuUsecase)(nil).FetchByOfferedAt), ctx, start, end)
}

// FetchMenuWithDishes mocks base method.
func (m *MockMenuUsecase) FetchMenuWithDishes(ctx context.Context, limit, offset int32) ([]*domain.MenuWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMenuWithDishes", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.MenuWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMenuWithDishes indicates an expected call of FetchMenuWithDishes.
func (mr *MockMenuUsecaseMockRecorder) FetchMenuWithDishes(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMenuWithDishes", reflect.TypeOf((*MockMenuUsecase)(nil).FetchMenuWithDishes), ctx, limit, offset)
}

// FetchMenuWithDishesByOfferedAt mocks base method.
func (m *MockMenuUsecase) FetchMenuWithDishesByOfferedAt(ctx context.Context, start, end time.Time) ([]*domain.MenuWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMenuWithDishesByOfferedAt", ctx, start, end)
	ret0, _ := ret[0].([]*domain.MenuWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMenuWithDishesByOfferedAt indicates an expected call of FetchMenuWithDishesByOfferedAt.
func (mr *MockMenuUsecaseMockRecorder) FetchMenuWithDishesByOfferedAt(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMenuWithDishesByOfferedAt", reflect.TypeOf((*MockMenuUsecase)(nil).FetchMenuWithDishesByOfferedAt), ctx, start, end)
}

// GetByID mocks base method.
func (m *MockMenuUsecase) GetByID(ctx context.Context, id string) (*domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMenuUsecaseMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMenuUsecase)(nil).GetByID), ctx, id)
}

// GetByOfferedAt mocks base method.
func (m *MockMenuUsecase) GetByOfferedAt(ctx context.Context, offeredAt time.Time) (*domain.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOfferedAt", ctx, offeredAt)
	ret0, _ := ret[0].(*domain.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOfferedAt indicates an expected call of GetByOfferedAt.
func (mr *MockMenuUsecaseMockRecorder) GetByOfferedAt(ctx, offeredAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOfferedAt", reflect.TypeOf((*MockMenuUsecase)(nil).GetByOfferedAt), ctx, offeredAt)
}

// GetMenuWithDishesByID mocks base method.
func (m *MockMenuUsecase) GetMenuWithDishesByID(ctx context.Context, id string) (*domain.MenuWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuWithDishesByID", ctx, id)
	ret0, _ := ret[0].(*domain.MenuWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuWithDishesByID indicates an expected call of GetMenuWithDishesByID.
func (mr *MockMenuUsecaseMockRecorder) GetMenuWithDishesByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuWithDishesByID", reflect.TypeOf((*MockMenuUsecase)(nil).GetMenuWithDishesByID), ctx, id)
}

// GetMenuWithDishesByOfferedAt mocks base method.
func (m *MockMenuUsecase) GetMenuWithDishesByOfferedAt(ctx context.Context, offeredAt time.Time) (*domain.MenuWithDishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuWithDishesByOfferedAt", ctx, offeredAt)
	ret0, _ := ret[0].(*domain.MenuWithDishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuWithDishesByOfferedAt indicates an expected call of GetMenuWithDishesByOfferedAt.
func (mr *MockMenuUsecaseMockRecorder) GetMenuWithDishesByOfferedAt(ctx, offeredAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuWithDishesByOfferedAt", reflect.TypeOf((*MockMenuUsecase)(nil).GetMenuWithDishesByOfferedAt), ctx, offeredAt)
}
