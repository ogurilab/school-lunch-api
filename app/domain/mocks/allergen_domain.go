// Code generated by MockGen. DO NOT EDIT.
// Source: domain/allergen_domain.go
//
// Generated by this command:
//
//	mockgen -source domain/allergen_domain.go -destination domain/mocks/allergen_domain.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	domain "github.com/ogurilab/school-lunch-api/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAllergenRepository is a mock of AllergenRepository interface.
type MockAllergenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAllergenRepositoryMockRecorder
}

// MockAllergenRepositoryMockRecorder is the mock recorder for MockAllergenRepository.
type MockAllergenRepositoryMockRecorder struct {
	mock *MockAllergenRepository
}

// NewMockAllergenRepository creates a new mock instance.
func NewMockAllergenRepository(ctrl *gomock.Controller) *MockAllergenRepository {
	mock := &MockAllergenRepository{ctrl: ctrl}
	mock.recorder = &MockAllergenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllergenRepository) EXPECT() *MockAllergenRepositoryMockRecorder {
	return m.recorder
}

// FetchByDishID mocks base method.
func (m *MockAllergenRepository) FetchByDishID(ctx context.Context, dishID string) ([]*domain.Allergen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByDishID", ctx, dishID)
	ret0, _ := ret[0].([]*domain.Allergen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByDishID indicates an expected call of FetchByDishID.
func (mr *MockAllergenRepositoryMockRecorder) FetchByDishID(ctx, dishID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByDishID", reflect.TypeOf((*MockAllergenRepository)(nil).FetchByDishID), ctx, dishID)
}

// FetchInDish mocks base method.
func (m *MockAllergenRepository) FetchInDish(ctx context.Context, dishIDs []string) ([]*domain.Allergen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInDish", ctx, dishIDs)
	ret0, _ := ret[0].([]*domain.Allergen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInDish indicates an expected call of FetchInDish.
func (mr *MockAllergenRepositoryMockRecorder) FetchInDish(ctx, dishIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInDish", reflect.TypeOf((*MockAllergenRepository)(nil).FetchInDish), ctx, dishIDs)
}

// MockAllergenUsecase is a mock of AllergenUsecase interface.
type MockAllergenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAllergenUsecaseMockRecorder
}

// MockAllergenUsecaseMockRecorder is the mock recorder for MockAllergenUsecase.
type MockAllergenUsecaseMockRecorder struct {
	mock *MockAllergenUsecase
}

// NewMockAllergenUsecase creates a new mock instance.
func NewMockAllergenUsecase(ctrl *gomock.Controller) *MockAllergenUsecase {
	mock := &MockAllergenUsecase{ctrl: ctrl}
	mock.recorder = &MockAllergenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllergenUsecase) EXPECT() *MockAllergenUsecaseMockRecorder {
	return m.recorder
}

// FetchByDishID mocks base method.
func (m *MockAllergenUsecase) FetchByDishID(ctx context.Context, dishID string) ([]*domain.Allergen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByDishID", ctx, dishID)
	ret0, _ := ret[0].([]*domain.Allergen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByDishID indicates an expected call of FetchByDishID.
func (mr *MockAllergenUsecaseMockRecorder) FetchByDishID(ctx, dishID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByDishID", reflect.TypeOf((*MockAllergenUsecase)(nil).FetchByDishID), ctx, dishID)
}

// FetchByMenuID mocks base method.
func (m *MockAllergenUsecase) FetchByMenuID(ctx context.Context, menuID string) ([]*domain.Allergen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByMenuID", ctx, menuID)
	ret0, _ := ret[0].([]*domain.Allergen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByMenuID indicates an expected call of FetchByMenuID.
func (mr *MockAllergenUsecaseMockRecorder) FetchByMenuID(ctx, menuID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByMenuID", reflect.TypeOf((*MockAllergenUsecase)(nil).FetchByMenuID), ctx, menuID)
}

// MockAllergenController is a mock of AllergenController interface.
type MockAllergenController struct {
	ctrl     *gomock.Controller
	recorder *MockAllergenControllerMockRecorder
}

// MockAllergenControllerMockRecorder is the mock recorder for MockAllergenController.
type MockAllergenControllerMockRecorder struct {
	mock *MockAllergenController
}

// NewMockAllergenController creates a new mock instance.
func NewMockAllergenController(ctrl *gomock.Controller) *MockAllergenController {
	mock := &MockAllergenController{ctrl: ctrl}
	mock.recorder = &MockAllergenControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllergenController) EXPECT() *MockAllergenControllerMockRecorder {
	return m.recorder
}

// FetchByDishID mocks base method.
func (m *MockAllergenController) FetchByDishID(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByDishID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchByDishID indicates an expected call of FetchByDishID.
func (mr *MockAllergenControllerMockRecorder) FetchByDishID(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByDishID", reflect.TypeOf((*MockAllergenController)(nil).FetchByDishID), c)
}

// FetchByMenuID mocks base method.
func (m *MockAllergenController) FetchByMenuID(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByMenuID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchByMenuID indicates an expected call of FetchByMenuID.
func (mr *MockAllergenControllerMockRecorder) FetchByMenuID(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByMenuID", reflect.TypeOf((*MockAllergenController)(nil).FetchByMenuID), c)
}
