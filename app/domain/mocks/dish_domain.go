// Code generated by MockGen. DO NOT EDIT.
// Source: domain/dish_domain.go
//
// Generated by this command:
//
//	mockgen -source domain/dish_domain.go -destination domain/mocks/dish_domain.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ogurilab/school-lunch-api/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDishRepository is a mock of DishRepository interface.
type MockDishRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDishRepositoryMockRecorder
}

// MockDishRepositoryMockRecorder is the mock recorder for MockDishRepository.
type MockDishRepositoryMockRecorder struct {
	mock *MockDishRepository
}

// NewMockDishRepository creates a new mock instance.
func NewMockDishRepository(ctrl *gomock.Controller) *MockDishRepository {
	mock := &MockDishRepository{ctrl: ctrl}
	mock.recorder = &MockDishRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDishRepository) EXPECT() *MockDishRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDishRepository) Create(ctx context.Context, dish *domain.Dish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDishRepositoryMockRecorder) Create(ctx, dish any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDishRepository)(nil).Create), ctx, dish)
}

// Fetch mocks base method.
func (m *MockDishRepository) Fetch(ctx context.Context, limit, offset int32) ([]*domain.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockDishRepositoryMockRecorder) Fetch(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockDishRepository)(nil).Fetch), ctx, limit, offset)
}

// FetchByMenuID mocks base method.
func (m *MockDishRepository) FetchByMenuID(ctx context.Context, menuID string) ([]*domain.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByMenuID", ctx, menuID)
	ret0, _ := ret[0].([]*domain.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByMenuID indicates an expected call of FetchByMenuID.
func (mr *MockDishRepositoryMockRecorder) FetchByMenuID(ctx, menuID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByMenuID", reflect.TypeOf((*MockDishRepository)(nil).FetchByMenuID), ctx, menuID)
}

// FetchByName mocks base method.
func (m *MockDishRepository) FetchByName(ctx context.Context, search string, limit, offset int32) ([]*domain.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByName", ctx, search, limit, offset)
	ret0, _ := ret[0].([]*domain.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByName indicates an expected call of FetchByName.
func (mr *MockDishRepositoryMockRecorder) FetchByName(ctx, search, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByName", reflect.TypeOf((*MockDishRepository)(nil).FetchByName), ctx, search, limit, offset)
}

// GetByID mocks base method.
func (m *MockDishRepository) GetByID(ctx context.Context, id string) (*domain.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDishRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDishRepository)(nil).GetByID), ctx, id)
}

// MockDishUsecase is a mock of DishUsecase interface.
type MockDishUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDishUsecaseMockRecorder
}

// MockDishUsecaseMockRecorder is the mock recorder for MockDishUsecase.
type MockDishUsecaseMockRecorder struct {
	mock *MockDishUsecase
}

// NewMockDishUsecase creates a new mock instance.
func NewMockDishUsecase(ctrl *gomock.Controller) *MockDishUsecase {
	mock := &MockDishUsecase{ctrl: ctrl}
	mock.recorder = &MockDishUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDishUsecase) EXPECT() *MockDishUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDishUsecase) Create(ctx context.Context, dish *domain.Dish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDishUsecaseMockRecorder) Create(ctx, dish any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDishUsecase)(nil).Create), ctx, dish)
}

// Fetch mocks base method.
func (m *MockDishUsecase) Fetch(ctx context.Context, search string, limit, offset int32) ([]*domain.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, search, limit, offset)
	ret0, _ := ret[0].([]*domain.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockDishUsecaseMockRecorder) Fetch(ctx, search, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockDishUsecase)(nil).Fetch), ctx, search, limit, offset)
}

// FetchByMenuID mocks base method.
func (m *MockDishUsecase) FetchByMenuID(ctx context.Context, menuID string) ([]*domain.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByMenuID", ctx, menuID)
	ret0, _ := ret[0].([]*domain.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByMenuID indicates an expected call of FetchByMenuID.
func (mr *MockDishUsecaseMockRecorder) FetchByMenuID(ctx, menuID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByMenuID", reflect.TypeOf((*MockDishUsecase)(nil).FetchByMenuID), ctx, menuID)
}

// GetByID mocks base method.
func (m *MockDishUsecase) GetByID(ctx context.Context, id string) (*domain.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDishUsecaseMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDishUsecase)(nil).GetByID), ctx, id)
}
